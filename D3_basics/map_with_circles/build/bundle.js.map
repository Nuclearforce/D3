{"version":3,"file":"bundle.js","sources":["../src/scripts/loadAndProcessData.js","../src/scripts/sizeLegend.js","../src/scripts/index.js"],"sourcesContent":["import {\n    json\n    ,csv\n} from 'd3';\nimport { feature } from 'topojson';\n \nexport const loadAndProcessData=()=>\nPromise.all([\n    csv('https://vizhub.com/curran/datasets/un-population-estimates-2017-medium-variant.csv'),\n    json('https://unpkg.com/visionscarto-world-atlas@0.0.4/world/50m.json')])\n    .then(([unData, topojsonData])=>{\n        //console.log(unData);\n    const rowById=unData.reduce((accumulator,d)=>{\n        accumulator[d['Country code']]=d;\n        return accumulator;\n    },{});\n\n    const countries = feature(topojsonData,topojsonData.objects.countries);\n\n    countries.features.forEach(d=>{\n        Object.assign(d.properties, rowById[+d.id]);\n        \n    });\n\n    const featuresWithPopulation = countries.features\n        .filter(d => d.properties['2018'])\n        .map(d => {d.properties['2018']=+d.properties['2018'].replace(/ /g,'')*1000;\n        return d;\n        });\n\n    return {\n        features: countries.features,\n        featuresWithPopulation\n    };\n});","export const sizeLegend = (selection, props) =>{\n    const {sizeScale\n        ,spacing    \n        ,textOffset\n        ,numTicks\n        ,tickFormat\n    } = props;\n\n    const ticks = sizeScale.ticks(numTicks)\n        .filter(d=>d!==0)\n        .reverse();\n\n    \n    const groups = selection.selectAll('g')\n            .data(ticks);\n\n    const groupsEnter = groups\n        .enter().append('g')\n        .attr('class','tick');;\n\n    groupsEnter.merge(groups)\n            .attr('transform',(d,i)=>\n                `translate(0,${i*spacing})`\n            )\n    groups.exit().remove();\n    \n    groupsEnter.append('circle')\n    .merge(groups.select('circle'))\n        .attr('r',sizeScale);\n\n    groupsEnter.append('text')\n    .merge(groups.select('text'))\n        .text(tickFormat)\n        .attr('dy','0.32em')\n        .attr('x',d=>sizeScale(d) + textOffset);\n    \n}","import { select\n    ,geoPath\n    ,geoNaturalEarth1\n    ,zoom\n    ,event\n    ,geoCentroid\n    ,scaleSqrt\n    ,max\n    ,format\n} from 'd3';\nimport { loadAndProcessData } from './loadAndProcessData'; \nimport {sizeLegend} from './sizeLegend';\n\nconst svg=select('svg');\n \nconst projection = geoNaturalEarth1();\nconst pathGenerator = geoPath().projection(projection);\nconst sizeScale = scaleSqrt();\nconst radiusValue = d=> d.properties['2018'];\n\nconst g = svg.append('g');\n\nconst colorLegendG = svg.append('g')\n    .attr('transform',`translate(30,300)`);\n\ng.append('path')\n    .attr('class','sphere')\n    .attr('d',pathGenerator({type:'Sphere'}));\n\nsvg.call(zoom().on('zoom',()=>{\n    g.attr('transform',event.transform);\n}));\n\nconst populationFormat = format(',');\n\nloadAndProcessData().then(countries=>{\n\n    sizeScale\n        .domain([0,max(countries.features,radiusValue)])\n        .range([0,33]);\n\n    g.selectAll('path')\n        .data(countries.features)\n        .enter().append('path')\n            .attr('class','country')\n            .attr('d', pathGenerator)\n            .attr('fill',d=>d.properties['2018'] ? '#d8d8d8' : '#fec1c1')\n        .append('title')\n            .text(d=> isNaN(radiusValue(d))\n                ? 'Missing data'\n                :[\n                d.properties['Region, subregion, country or area *'],\n                populationFormat(radiusValue(d))\n            ].join(': '));\n\n    countries.featuresWithPopulation.forEach(d=>{\n        d.properties.projected=projection(geoCentroid(d));\n    }); \n\n    g.selectAll('circle')\n    .data(countries.featuresWithPopulation)\n    .enter().append('circle')\n        .attr('class','country-circle')\n        .attr('cx',d => d.properties.projected[0])\n        .attr('cy',d => d.properties.projected[1])\n        .attr('r',d=>sizeScale(radiusValue(d)));\n\n    g.append('g')\n        .attr('transform',`translate(55,220)`)\n        .call(sizeLegend, {\n        sizeScale,\n        spacing: 40,\n        textOffset:10,\n        numTicks:5,\n        tickFormat: populationFormat\n    })\n    .append('text')\n        .attr('class','legend-title')\n        .text('Population')\n        .attr('y',-50)\n        .attr('x',-20);\n\n    });"],"names":["csv","json","feature","select","geoNaturalEarth1","geoPath","scaleSqrt","zoom","event","format","max","geoCentroid"],"mappings":"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"}